#N canvas 17 223 835 493 10;
#X declare -lib Gem;
#X text 522 8 GEM object;
#X obj 8 273 cnv 15 430 170 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#X text 39 275 Inlets:;
#X text 39 404 Outlets:;
#X obj 8 236 cnv 15 430 30 empty empty empty 20 12 0 14 #bcbcbc #404040 0;
#X text 17 235 Arguments:;
#X obj 8 66 cnv 15 430 155 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#X obj 449 67 cnv 15 380 300 empty empty empty 20 12 0 14 #dce4fc #404040 0;
#X text 453 50 Example:;
#X obj 594 303 cnv 15 100 60 empty empty empty 20 12 0 14 #bcbcbc #404040 0;
#N canvas 16 419 450 300 gemwin 0;
#X obj 132 136 gemwin;
#X obj 67 89 outlet;
#X obj 67 10 inlet;
#X obj 67 41 route create;
#X msg 67 70 set destroy;
#X msg 142 68 set create;
#X msg 268 112 destroy;
#X msg 132 112 create \, 1;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 3 0 7 0;
#X connect 3 1 5 0;
#X connect 3 1 6 0;
#X connect 4 0 1 0;
#X connect 5 0 1 0;
#X connect 6 0 0 0;
#X connect 7 0 0 0;
#X restore 599 342 pd gemwin;
#X msg 599 323 create;
#X text 595 302 Create window:;
#X obj 452 137 cnv 15 240 140 empty empty empty 20 12 0 14 #14e814 #404040 0;
#X text 71 31 Class: pix object;
#X text 27 423 Outlet 1: gemlist;
#X text 33 289 Inlet 1: gemlist;
#X obj 451 335 square 3;
#X obj 706 193 sphere;
#X obj 451 74 gemhead 50;
#X obj 706 75 gemhead 49;
#X obj 482 207 spigot;
#X obj 484 141 tgl 15 0 empty empty empty 0 -6 0 8 #fcfcfc #000000 #000000 0 1;
#X msg 570 233 256 256;
#X text 50 12 Synopsis: [pix_snap];
#X text 13 187 When grabbing \, be sure that something is in the rendering-buffer \, else you will get a black texture., f 69;
#X text 33 302 Inlet 1: bang: do grab!;
#X text 63 246 list: [offsetX offsetY [dimX dimY]];
#X floatatom 527 75 5 0 0 0 - - - 0;
#X obj 451 114 rotate 0 1 0 0;
#X obj 706 143 translate -1 0 1 0;
#X obj 451 94 translate 1 0 1 0;
#X obj 451 187 t a b;
#X obj 706 124 rotate 0 1 1 1;
#N canvas 5 103 297 145 count 0;
#X obj 116 39 t b;
#X obj 116 60 i;
#X obj 143 61 + 1;
#X obj 170 62 % 360;
#X obj 116 17 inlet;
#X obj 116 94 outlet;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 1 0 5 0;
#X connect 2 0 3 0;
#X connect 3 0 1 1;
#X connect 4 0 0 0;
#X restore 746 104 pd count;
#X text 624 233 dimension;
#X text 623 211 offset;
#X text 506 151 drawn but before the square;
#X text 504 138 SNAP! after the sphere is;
#X text 29 67 Description: take a screenshot and convert it to a Pix;
#X text 13 91 When banged [pix_snap] will take a snapshot of the current frame buffer which can then be used as a pix. When a snap message (or a bang) is sent to [pix_snap] \, that is the moment that something is captured from the current frame buffer., f 69;
#X obj 451 281 pix_invert;
#X obj 451 303 pix_texture;
#X text 33 344 Inlet 1: snap: do grab!;
#X obj 706 97 t a b;
#X obj 706 165 color 1 0 0;
#X obj 482 227 t b b;
#X msg 518 227 0;
#X obj 451 256 pix_snap 0 0 500 500;
#X msg 570 209 100 100;
#X obj 598 8 declare -lib Gem;
#X text 33 376 Inlet 2: list: offsetX offsetY (in pixels. default: 0 0), f 63;
#X text 33 391 Inlet 3: list: dimenX dimenY (in pixels. default: window-size), f 63;
#X text 33 357 Inlet 1: type BYTE|FLOAT|DOUBLE;
#X text 13 146 Values are captured as unsigned BYTES \, but you can change the type with the 'type' message (be aware that currently virtually no pix-objects can handle FLOAT images), f 69;
#X text 33 318 Inlet 1: dimen <w> <h>;
#X text 33 330 Inlet 1: offset <x> <y>;
#X msg 518 177 type FLOAT;
#X connect 10 0 11 0;
#X connect 11 0 10 0;
#X connect 19 0 31 0;
#X connect 20 0 44 0;
#X connect 21 0 46 0;
#X connect 22 0 21 1;
#X connect 23 0 48 2;
#X connect 28 0 29 1;
#X connect 29 0 32 0;
#X connect 30 0 45 0;
#X connect 31 0 29 0;
#X connect 32 0 48 0;
#X connect 32 1 21 0;
#X connect 33 0 30 0;
#X connect 34 0 33 1;
#X connect 41 0 42 0;
#X connect 42 0 17 0;
#X connect 44 0 33 0;
#X connect 44 1 34 0;
#X connect 45 0 18 0;
#X connect 46 0 48 0;
#X connect 46 1 47 0;
#X connect 47 0 22 0;
#X connect 48 0 41 0;
#X connect 49 0 48 1;
#X connect 57 0 48 0;
