////////////////////////////////////////////////////////
//
// GEM - Graphics Environment for Multimedia
//
// zmoelnig@iem.kug.ac.at
//
// Implementation file
//
//    Copyright (c) 1997-1998 Mark Danks.
//    Copyright (c) Günther Geiger.
//    Copyright (c) 2001-2002 IOhannes m zmoelnig. forum::für::umläute. IEM
//    For information on usage and redistribution, and for a DISCLAIMER OF ALL
//    WARRANTIES, see the file, "GEM.LICENSE.TERMS" in this distribution.
//
/////////////////////////////////////////////////////////
#ifdef HAVE_CONFIG_H
# include "config.h"
#endif

#include "videoDC1394.h"
using namespace gem;

#include "Gem/RTE.h"

#ifdef HAVE_LIBDC1394
REGISTER_VIDEOFACTORY("dc1394", videoDC1394);
#endif
/////////////////////////////////////////////////////////
//
// videoDC1394
//
/////////////////////////////////////////////////////////
// Constructor
//
/////////////////////////////////////////////////////////
videoDC1394 :: videoDC1394() : video()
{
#ifdef HAVE_LIBDC1394
  provide("dc1394");
#endif
  m_haveVideo=false;
}

/////////////////////////////////////////////////////////
// Destructor
//
/////////////////////////////////////////////////////////
videoDC1394 :: ~videoDC1394(){
}
#ifdef HAVE_LIBDC1394
/////////////////////////////////////////////////////////
// render
//
/////////////////////////////////////////////////////////
void *videoDC1394 :: capturing(void*you)
{
  return NULL;
}

pixBlock *videoDC1394 :: getFrame(){
  return NULL;
  //return &m_image;
}

/////////////////////////////////////////////////////////
// openDevice
//
/////////////////////////////////////////////////////////
int videoDC1394 :: openDevice(int format){
  return -1;

  verbose(1, "DC1394: Successfully opened...");
  //  return(fd);
}
/////////////////////////////////////////////////////////
// resetDevice
//
/////////////////////////////////////////////////////////
int videoDC1394 :: resetDevice(void){
 return 0;
}
/////////////////////////////////////////////////////////
// closeDevice
//
/////////////////////////////////////////////////////////
void videoDC1394 :: closeDevice(void){
}

/////////////////////////////////////////////////////////
// startTransfer
//
/////////////////////////////////////////////////////////
int videoDC1394 :: startTransfer(int format)
{
  return 1;
}

/////////////////////////////////////////////////////////
// stopTransfer
//
/////////////////////////////////////////////////////////
int videoDC1394 :: stopTransfer()
{
  return(1);
}

/////////////////////////////////////////////////////////
// normMess
//
/////////////////////////////////////////////////////////
int videoDC1394 :: setNorm(char*norm){
  return 0;
}

int videoDC1394 :: setDevice(int d){
  return 0;
}
int videoDC1394 :: setDevice(char*name){
  return 0;
}

int videoDC1394 :: setColor(int format){
  if (format<=0)return -1;
  m_reqFormat=format;
  return 0;
}

/////////////////////////////////////////
//
// Set the quality for DV decoding
//
/////////////////////////////////////////
int videoDC1394 :: setQuality(int quality){
  return 0;
}

#endif // HAVE_LIBDC1394
