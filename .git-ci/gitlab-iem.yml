###################################################
### configuration templates (to be used for snapshot and release builds)
variables:
  PDVERSION: 0.52-2
  LANG: C
  # compatibility for older OSX-builds (<mutex> requires C++11, available since OSX10.9/Mavericks)
  MACOSX_DEPLOYMENT_TARGET: "10.9"
  ARTIFACTSDIR: 'artifacts'
  IEM_CI_TMPDIR: .git-ci/_tmp/

.artifacts:
  artifacts:
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME%_*}
    paths:
      - "${ARTIFACTSDIR}"
    when: always

.snapshot:
  extends:
    - .artifacts
  #  except:
  #  - tags
  #artifacts:
  #  expire_in: 1 week

.release:
  only:
    - tags

.run-selected:
  rules:
    # run if IEM_CI_JOBS list is empty
    - if: $IEM_CI_JOBS == ""
    # run if CI_JOB_NAME is in the IEM_CI_JOBS list
    - if: $CI_JOB_NAME =~ $IEM_CI_JOBS
    # otherwise, don't run
    - when: never

.build:
  stage: build
  script:
    - echo building with ${NUMBER_OF_PROCESSORS:=$(nproc || sysctl -n hw.ncpu || echo 1)} CPUs
    - tools/systeminfo.sh || true
    - date
    - g++ -v
    - mkdir -pv "${ARTIFACTSDIR}"
    - autoreconf -fiv || ./autogen.sh
    - ./configure --disable-dependency-tracking ${TARGETARCH:+--host=}${TARGETARCH} ${fat_binary:+--enable-fat-binary=}${fat_binary} ${PDDIR:+--with-pd=}${PDDIR} ${pd_extension:+--with-extension=}${pd_extension} ${gem_defaultwindow:+--with-defaultwindow=}${gem_defaultwindow} --with-DeckLink=local || true
    - test -n "${CI_COMMIT_TAG}" || cp -v config.log "${ARTIFACTSDIR}"
    - make check -j"${NUMBER_OF_PROCESSORS}"
    - make install DESTDIR=$(pwd)/${ARTIFACTSDIR}/${CI_JOB_NAME%_*} libdir=/ extradir=/Gem includedir=/Gem/include
    # finally split the binaries from the debug information
    - cd "$(pwd)/${ARTIFACTSDIR}/${CI_JOB_NAME%_*}/Gem"
    - (ls -lha; du -sh) || true
    - "${CI_BUILDS_DIR}/.git-ci/split-debug" ${pd_extension:+*.${pd_extension}} *.pd_* *.dll *.so
    - (ls -lha; du -sh) || true
    - cd "${CI_BUILDS_DIR}"

.build:linux:
  extends:
    - .build
  image: registry.git.iem.at/devtools/docker/debiancross:amd64
  before_script:
    - tools/systeminfo.sh || true
    - mkdir -p /etc/apt/sources.list.d/
    - find /etc/apt/sources.list /etc/apt/sources.list.d/ -name "*.list" -type f -exec egrep "^deb " {} ";" | sed -e 's|^deb |deb-src |' > /etc/apt/sources.list.d/${CI_COMMIT_REF_SLUG}.list
    - apt-get update
    - apt-get install ${TARGETDEBARCH:+-a}${TARGETDEBARCH} puredata-dev puredata-core
    - apt-get build-dep ${TARGETDEBARCH:+-a}${TARGETDEBARCH} gem || true
    - date
    - g++ -v

.build:macos:
  extends:
    - .build
  tags:
     - bigsur
  retry:
    max: 1
    when:
      - runner_system_failure
  variables:
    CXXFLAGS: "-std=c++11 -g -O2"
    gem_defaultwindow: "gemglfw3window"
    fat_binary: "x86_64,arm64"
    HOMEBREW_NO_ANALYTICS: 1
    HOMEBREW_NO_INSTALL_UPGRADE: 1
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    HOMEBREW_NO_AUTO_UPDATE: 1
  before_script:
    - tools/systeminfo.sh || true
    - rm -rf /Applications/Pd*.app/

    # download Pd
    - curl -sL http://msp.ucsd.edu/Software/pd-${PDVERSION}.mac.tar.gz | tar --extract --gzip --directory /Applications/ || mkdir -p "${IEM_CI_TMPDIR}"
    # if there was no tarball, try to get a zip-file
    - test ! -d "${IEM_CI_TMPDIR}" || wget -q -O "${IEM_CI_TMPDIR}"/Pd.zip http://msp.ucsd.edu/Software/pd-${PDVERSION}.macos.zip
    - test ! -f "${IEM_CI_TMPDIR}"/Pd.zip || unzip "${IEM_CI_TMPDIR}"/Pd.zip -d "${IEM_CI_TMPDIR}"
    # the ZIP-file shoud contain a .dmg containing Pd
    - |
      for dmg in "${IEM_CI_TMPDIR}"/Pd*.dmg; do break; done
    - pddisk=""
    - test ! -f "${dmg}" || pddisk=$(hdiutil attach "${dmg}" 2>/dev/null | egrep "^/.*/Volumes/" | tail -1 | awk '{print $NF}')
    - rm -rf "${dmg}"
    - |
      for app in "${pddisk}"/Pd*.app "${IEM_CI_TMPDIR}"/Pd*.app; do if test -d "${app}"; then cp -r "${app}" /Applications/; break; fi; done
    - test ! -d "${pddisk}" || umount "${pddisk}"
    - |
      rm -rf "${IEM_CI_TMPDIR}"
      dmg=""
      pddisk=""
      app=""

    - export PD=$(find /Applications/Pd*.app/Contents/Resources/bin/ type f -name pd -print -quit)
    - export PDDIR=$(find /Applications/Pd*.app/Contents/Resources -maxdepth 1 -type d -print -quit)
    - echo "PD=${PD}"
    - echo "PDDIR=${PDDIR}"
    - brew bundle --no-upgrade --file=.git-ci/macOS.brew
    - /usr/local/opt/gettext/bin/gettextize
  after_script:
    - mkdir -p "${ARTIFACTSDIR}/${CI_JOB_NAME%_*}"
    - find "${ARTIFACTSDIR}/${CI_JOB_NAME%_*}" -type f "(" -name "*.${pd_extension:-d_*}" -o -name "*.pd_darwin" -o -name "*.so" ")" -exec .git-ci/localdeps.macos.sh {} +

.build:w64:
  extends:
    - .build
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: mingw64
    pd_downloadsuffix: .msw.zip
  before_script:
    - tools/systeminfo.sh || true
    - export PDDIR="$(pwd)/_pd"
    - downloadfile="pd-${PDVERSION}${pd_downloadsuffix}"
    - wget -q -O "${downloadfile}" "http://msp.ucsd.edu/Software/pd-${PDVERSION}${pd_downloadsuffix}"
    - mkdir -p "${PDDIR}"
    - test "x${downloadfile}" = "x${downloadfile%.zip}" || unzip -q "${downloadfile}" -d "${PDDIR}"
    - mv -v "${PDDIR}"/*/* "${PDDIR}"
    - rm -f "${downloadfile}"
    - rm -f "${PDDIR}"/bin/msvcr*.dll
    - export PD="${PDDIR}/bin/pd.com"
    - pacman --noconfirm -S --needed $(cat .git-ci/msys2.pacman  | sed -e 's|#.*||' -e "s|@MINGW@|${MINGW_PACKAGE_PREFIX}-|")
  after_script:
    - mkdir -p "${ARTIFACTSDIR}/${CI_JOB_NAME%_*}"
    - find "${ARTIFACTSDIR}/${CI_JOB_NAME%_*}" -type f "(" -name "*.${pd_extension:-m_*}" -o -name "*.dll" -o -name "*.exe" -o -name "*.com" ")" -exec .git-ci/localdeps.win.sh {} +

.build:w32:
  extends:
    - .build:w64
  variables:
    IEMCI_CONFIGURATIONS: mingw32
    pd_downloadsuffix: -i386.msw.zip
    CXXFLAGS: "-g -O2 -fexceptions"

###################################################
### the actual jobs: (linux,macos,windows)*(release,snapshot)

Source:
  extends:
    - .artifacts
    - .snapshot
  stage: build
  before_script:
    # we need 'git' to create a source package
    - apt-get update && apt-get --no-install-recommends -y install git
  script:
    # create a source package
    - git archive --format=tar --prefix="${ARTIFACTSDIR}/Source/${CI_PROJECT_NAME}/" HEAD | tar xf -

Linux:
  extends:
    - .build:linux
    - .snapshot
Darwin:
  extends:
    - .build:macos
    - .snapshot
W32:
  extends:
    - .build:w32
    - .snapshot
W64:
  extends:
    - .build:w64
    - .snapshot

distcheck:
  extends:
    - .build:linux
  stage: test
  script:
    - tools/systeminfo.sh || true
    - date
    - g++ -v
    - mkdir -pv "${ARTIFACTSDIR}"
    - autoreconf -fiv || ./autogen.sh
    - ./configure --disable-dependency-tracking ${TARGETARCH:+--host=}${TARGETARCH} --without-ALL ${PDDIR:+--with-pd=}${PDDIR} || true
    - make distcheck -j2

deken:
  stage: deploy
  image: registry.git.iem.at/pd/deken:latest
  script:
    - chmod -R go-w ${ARTIFACTSDIR}/
# remove ltlib leftovers
    - find ${ARTIFACTSDIR}/ "(" -name "*.la" -or -name "*.a" ")" -delete
# remove debug information
    - find ${ARTIFACTSDIR}/ -name "*.debug" -delete
# create deken packages
    - for d in ${ARTIFACTSDIR}/*/${CI_PROJECT_NAME}/; do deken package --version="${CI_COMMIT_TAG#v}" "${d}"; done
# upload deken packages
    - test -z "${CI_COMMIT_TAG}" || test -z "${DEKEN_USERNAME}" || test -z "${DEKEN_PASSWORD}" || deken upload --no-source-error ./*.dek
  artifacts:
    name: deken-package
    paths:
      - ./*.dek
      - ./*.dek.*

include:
  # additionally run some static code analysis
  - template: Security/SAST.gitlab-ci.yml
